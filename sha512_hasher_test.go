package hasher

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSHA512Hasher_String(t *testing.T) {
	salt := "salt"
	iter := 1
	password := []byte("password")
	h := SHA512Hasher{Salt: &salt, Iter: &iter, Password: &password, Marshaler: &DjangoMarshaler}

	w := "sha512$1$salt$70617373776f7264"
	g := h.String()
	assert.Equal(t, w, g)

	h = SHA512Hasher{Salt: &salt, Iter: &iter, Password: &password}
	assert.Panics(t, assert.PanicTestFunc(func() {
		_ = h.String()
	}))
}

func TestSHA512Hasher_Check(t *testing.T) {
	salt := "salt"
	iter := 1
	password := []byte{0x29, 0x8, 0xd2, 0xc2, 0x8d, 0xfc, 0x4, 0x77, 0x41, 0xfc, 0x59, 0xa, 0x2, 0x6f, 0xfa, 0xde, 0x23, 0x7a, 0xb2, 0xba, 0x7e, 0x12, 0x66, 0xf0, 0x10, 0xfe, 0x49, 0xbd, 0xe5, 0x48, 0xb5, 0x98, 0x7a, 0x53, 0x4a, 0x86, 0x65, 0x5a, 0xd, 0x17, 0xf3, 0x36, 0x58, 0x8e, 0x54, 0xc, 0xd6, 0x6f, 0x67, 0x23, 0x4b, 0x15, 0x2b, 0xbb, 0x64, 0x5b, 0x4b, 0xb8, 0x57, 0x58, 0xa1, 0x32, 0x5d, 0x64}
	h := SHA512Hasher{Salt: &salt, Iter: &iter, Password: &password}

	check := h.Check("password")
	assert.Truef(t, check, "Passwords are equal")

	check = h.Check("password2")
	assert.Falsef(t, check, "Passwords are not equal")
}

func TestSHA512Hasher_Hash(t *testing.T) {
	salt := "salt"
	iter := 1
	password := []byte{0x29, 0x8, 0xd2, 0xc2, 0x8d, 0xfc, 0x4, 0x77, 0x41, 0xfc, 0x59, 0xa, 0x2, 0x6f, 0xfa, 0xde, 0x23, 0x7a, 0xb2, 0xba, 0x7e, 0x12, 0x66, 0xf0, 0x10, 0xfe, 0x49, 0xbd, 0xe5, 0x48, 0xb5, 0x98, 0x7a, 0x53, 0x4a, 0x86, 0x65, 0x5a, 0xd, 0x17, 0xf3, 0x36, 0x58, 0x8e, 0x54, 0xc, 0xd6, 0x6f, 0x67, 0x23, 0x4b, 0x15, 0x2b, 0xbb, 0x64, 0x5b, 0x4b, 0xb8, 0x57, 0x58, 0xa1, 0x32, 0x5d, 0x64}
	h := SHA512Hasher{Salt: &salt, Iter: &iter}

	g := h.Hash("password")
	assert.Equal(t, password, g)
}

func TestSHA512Hasher_Hash_Empty(t *testing.T) {
	h := SHA512Hasher{}
	h.Hash("password")
	assert.NotNil(t, h.Iter)
	assert.NotNil(t, h.Salt)
}

func TestSHA512Hasher_SetPassword(t *testing.T) {
	h := SHA512Hasher{}
	h.SetPassword("password")
	assert.NotNil(t, h.Password)
}
